#链接
------- 
>牛客OJ：[数组中重复的数字](http://www.nowcoder.com/practice/623a5ac0ea5b4e5f95552655361ae0a8?tpId=13&tqId=11203&rp=2&ru=%2Fta%2Fcoding-interviews&qru=%2Fta%2Fcoding-interviews%2Fquestion-ranking)
> 
>九度OJ：未收录
> 
>GitHub代码： [051-数组中重复的数字](https://github.com/gatieme/CodingInterviews/tree/master/051-数组中重复的数字)
>
>CSDN题解：[剑指Offer--051-数组中重复的数字](http://blog.csdn.net/gatieme/article/details/51540159)


| 牛客OJ | 九度OJ | CSDN题解 | GitHub代码 | 
| ------------- |:-------------:| -----:| -----:|
|[051-数组中重复的数字](http://www.nowcoder.com/practice/623a5ac0ea5b4e5f95552655361ae0a8?tpId=13&tqId=11203&rp=2&ru=%2Fta%2Fcoding-interviews&qru=%2Fta%2Fcoding-interviews%2Fquestion-ranking) | 未收录 | [剑指Offer--051-数组中重复的数字](http://blog.csdn.net/gatieme/article/details/51540159) | [051-数组中重复的数字](https://github.com/gatieme/CodingInterviews/tree/master/051-数组中重复的数字) |


#题意
-------


**题目描述**

>在一个长度为n的数组里的所有数字都在0到n-1的范围内。 
>
>数组中某些数字是重复的，但不知道有几个数字是重复的。
>
>也不知道每个数字重复几次。请找出数组中任意一个重复的数字。
>
>例如，如果输入长度为7的数组{2,3,1,0,2,5,3}，那么对应的输出是重复的数字2或者3。

**样例输入**

>2, 3, 1, 0, 2, 5, 3
>
> 2, 1, 3, 1, 4


**样例输出**

>2
>
>1

#检查数据的合法性 
-------

*    检查输入参数是否合法

*    数组中的数据是否满足所有数字都在0到n-1的范围内

```cpp
bool CheckValidity(int *numbers, int length)
{
    //  输入数据不合法
    if(numbers == NULL || length <= 0)
    {
        return false;
    }

    //  元素必须在[0, n-1]的范围
    for(int i = 0; i < length; i++)
    {
        if(numbers[i] < 0 || numbers[i] > length - 1)
        {
            return false;
        }
    }

    return true;
}
```
#利用内外两层循环来判断重复
--------
```cpp

class Solution {
public:
    bool duplicate(int numbers[], int length, int* duplication)
    {
    
//        计算数组的长度
//        int length = sizeof(numbers)/sizeof(numbers[0]);

        *duplication =-1;
        bool isDup=false;
        
        if(!CheckValidity(numbers,length))
        {
            return false;
        }

        for(int i =0; i<length-1; i++)
        {
            for(int j =i+1;j<length;j++)
            {
                if(numbers[i]==numbers[j])
                {
                    isDup= true;
                    *duplication=numbers[i];
                    return isDup;
                    
                }
            }
        }
        return isDup;

    }
};

```

#排序后判断重复
-------

最简单的思路就是先把输入的数组排序。从排序的数组中找出重复的数字就是个很容易的事情了。只需要从头向尾扫描一遍排序好的数组即可。

对一个数组排序的时间复杂度是$O(nlogn)$

扫描一个排序好的数组发现重复的数字的时间复杂度是$O(n)$


```cpp
class Solution
{
public:
    bool duplicate(int numbers[], int length, int* duplication)
    {
        *duplication = -1;

        if(CheckValidity(numbers, length) == false)
        {
            return false;
        }

        sort(numbers, numbers + length);    //  对数组进行排序
        
        bool isDup = false;

        //  扫描一遍数组发现重复的数字
        for(int i = 0; i < length - 1; i++)
        {
            if(numbers[i] == numbers[i + 1])    //  重复了
            {
                isDup = true;
                *duplication = numbers[i];
                break;
            }
        }

        return isDup;
    }
};

```
